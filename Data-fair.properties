
!**
! BFH-TI, SWS
! CAS DS05, ParSynch (Frühling 2012)
!
! Java-Übung ProductionConsumption
! ================================
!
! Properties-File (Data.properties)
! ---------------
! Keys, Default-Definitionen
!
! V15.04.2012
! hans.roethlisberger@bfh.ch  
!**

!Gesamtproduktionszeit (Integer(s) >= 1  (Vorschlag: 10))
!(kann mit Argument beim Start überschrieben werden).
timeToRun = 10

!Anzahl Produzenten-Threads (Integer >= 1 AND Produzenten + Konsumenten <= 2000
!(Vorschlag: 2)) (kann mit Argument beim Start überschrieben werden).
numberOfProducers = 2

!Anzahl Konsumenten-Threads (Integer >= 1 AND Produzenten + Konsumenten <= 2000
!(Vorschlag: 3)) (kann mit Argument beim Start überschrieben werden).
numberOfConsumers = 3

!Basisname der Produzenten (String  (Vorschlag: Prod))
!(wird additiv mit Laufnummer ergänzt).
baseNameOfProducers: Prod

!Basisname der Konsumenten (String  (Vorschlag: Kons))
!(wird additiv mit Laufnummer ergänzt).
baseNameOfConsumers: Kons

!Name des Inspektors (String  (Vorschlag: INSP)). Wird none definiert, werden
!inspectorPriority und cycleTimeInspector mit data.printData() nicht ausgegeben).
nameOfInspector: none

!Priorität für main-Thread (>=1 Integer <=10  (Vorschlag bei Implementierung: 10))
!(Default Priorität: 5; Produzenten/Konsumenten: 5).
mainPriority = 5

!Priorität für Inspektor-Thread (>=1 Integer <=10  (Vorschlag bei Implementierung: 8)).
inspectorPriority = 5

!Wartezeit für Inspektor (Integer(ms) >= 1  (Vorschlag bei Implementierung: 910))
cycleTimeInspector = 910

!Monitor für Schutz Lager, Queue fair, resp. nicht fair
!(Boolean true (fair) ODER false (nicht fair)  (Vorschlag: false)).
!Je nach Wahl Monitor ist true nicht implementierbar.
monitorStoreIsFair = true

!Nachfolgende Lager-Parameter mit Vorsicht dimensionieren, ansonsten
!ist eine Blockierung im Lager-Monitor möglich.

!Minimale Grösse des Lagers (Integer >= 1  (Vorschlag: 10000))
!(Muss mit allen Lagerparametern korrespondieren).
minimalStoreSize = 10000

!Maximale Grösse des Lagers (Integer >= 1  (Vorschlag: 140000))
!(Muss mit allen Lagerparametern korrespondieren).
maximalStoreSize = 140000

!Basislosgrösse für Produzenten, Minimalgrösse; Multiplikation mit
!Multiplikator (Integer >= 1  (Vorschlag: 10000)).
!(Muss mit allen Lagerparametern korrespondieren)
lotDefaultProduction = 10000

!Maximaler Multiplikator für Losgrösse Produzenten; 1 ergibt fixe Losgrösse
!mit lotDefaultProduction (Integer >= 1  (Vorschlag: 4))
!(Muss mit allen Lagerparametern korrespondieren).
lotFactorProduction = 4

!Basislosgrösse für Konsumenten, Minimalgrösse; Multiplikation mit
!Multiplikator (Integer >= 1  (Vorschlag: 20000))
!(Muss mit allen Lagerparametern korrespondieren). 
lotDefaultConsumption = 20000

!Maximaler Multiplikator für Losgrösse Konsumenten; 1 ergibt fixe Losgrösse
!mit lotDefaultConsumption (Integer >= 1  (Vorschlag: 5))
!(Muss mit allen Lagerparametern korrespondieren).
lotFactorConsumption = 5